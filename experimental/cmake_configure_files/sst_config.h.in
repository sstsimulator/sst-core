/* src/sst/core/sst_config.h.in.  Generated from cmake. 
 * Tries hard to mirror the file created by by autoheader.  
 */

/* Define to 1 if you have the `argz_add' function. */
#cmakedefine HAVE_ARGZ_ADD 1

/* Define to 1 if you have the `argz_append' function. */
#cmakedefine HAVE_ARGZ_APPEND 1

/* Define to 1 if you have the `argz_count' function. */
#cmakedefine HAVE_ARGZ_COUNT 1

/* Define to 1 if you have the `argz_create_sep' function. */
#cmakedefine HAVE_ARGZ_CREATE_SEP 1

/* Define to 1 if you have the <argz.h> header file. */
#cmakedefine HAVE_ARGZ_H 1

/* Define to 1 if you have the `argz_insert' function. */
#cmakedefine HAVE_ARGZ_INSERT 1

/* Define to 1 if you have the `argz_next' function. */
#cmakedefine HAVE_ARGZ_NEXT 1

/* Define to 1 if you have the `argz_stringify' function. */
#cmakedefine HAVE_ARGZ_STRINGIFY 1

/* Defines if the backtrace function is avalible */
#cmakedefine HAVE_BACKTRACE 1

/* Define to 1 if you have the `closedir' function. */
#cmakedefine HAVE_CLOSEDIR 1

/* Define to 1 if you have the <c_asm.h> header file. */
#cmakedefine HAVE_C_ASM_H 1

/* Defines whether we have the curses library */
#cmakedefine HAVE_CURSES 1

/* Define to 1 if you have the declaration of `cygwin_conv_path', and to 0 if
   you don't. */
#cmakedefine HAVE_DECL_CYGWIN_CONV_PATH 1

/* Define to 1 if you have the <dirent.h> header file. */
#cmakedefine HAVE_DIRENT_H 1

/* Define if you have the GNU dld library. */
#cmakedefine HAVE_DLD

/* Define to 1 if you have the <dld.h> header file. */
#cmakedefine HAVE_DLD_H 1

/* Define to 1 if you have the `dlerror' function. */
#cmakedefine HAVE_DLERROR 1

/* Define to 1 if you have the <dlfcn.h> header file. */
#cmakedefine HAVE_DLFCN_H 1

/* Define to 1 if you have the <dl.h> header file. */
#cmakedefine HAVE_DL_H 1

/* Define if you have the _dyld_func_lookup function. */
#cmakedefine HAVE_DYLD

/* Define to 1 if the system has the type `error_t'. */
#cmakedefine HAVE_ERROR_T 1

/* Define to 1 if you have the <execinfo.h> header file. */
#cmakedefine HAVE_EXECINFO_H 1

/* Defines whether we have the hdf5 library */
#cmakedefine HAVE_HDF5

/* Define to 1 if you have the <intrinsics.h> header file. */
#cmakedefine HAVE_INTRINSICS_H 1

/* Define to 1 if you have the <inttypes.h> header file. */
#cmakedefine HAVE_INTTYPES_H 1

/* Define to 1 if you have the libdl library or equivalent. */
#cmakedefine HAVE_LIBDL 1

/* Define if libdlloader will be built on this platform */
#cmakedefine HAVE_LIBDLLOADER

/* Defines whether we have the libz library */
#cmakedefine HAVE_LIBZ

/* Define to 1 if you have the <mach/mach_time.h> header file. */
#cmakedefine HAVE_MACH_MACH_TIME_H 1

/* Define to 1 if you have the <mach-o/dyld.h> header file. */
#cmakedefine HAVE_MACH_O_DYLD_H 1

/* Define to 1 if you have the `opendir' function. */
#cmakedefine HAVE_OPENDIR 1

/* Define if libtool can extract symbol lists from object files. */
#cmakedefine HAVE_PRELOADED_SYMBOLS

/* Define to 1 if you have the <Python.h> header file. */
#cmakedefine HAVE_PYTHON_H 1

/* Define to 1 if you have the `readdir' function. */
#cmakedefine HAVE_READDIR 1

/* Define if you have the shl_load function. */
#cmakedefine HAVE_SHL_LOAD

/* Define if C++ supports C++14 features. */
#cmakedefine HAVE_STDCXX_1Y

/* Define to 1 if you have the <stdint.h> header file. */
#cmakedefine HAVE_STDINT_H 1

/* Define to 1 if you have the <stdio.h> header file. */
#cmakedefine HAVE_STDIO_H 1

/* Define to 1 if you have the <stdlib.h> header file. */
#cmakedefine HAVE_STDLIB_H 1

/* Define to 1 if you have the <strings.h> header file. */
#cmakedefine HAVE_STRINGS_H 1

/* Define to 1 if you have the <string.h> header file. */
#cmakedefine HAVE_STRING_H 1

/* Define to 1 if you have the `strlcat' function. */
#cmakedefine HAVE_STRLCAT 1

/* Define to 1 if you have the `strlcpy' function. */
#cmakedefine HAVE_STRLCPY 1

/* Define to 1 if you have the <sys/dl.h> header file. */
#cmakedefine HAVE_SYS_DL_H 1

/* Define to 1 if you have the <sys/stat.h> header file. */
#cmakedefine HAVE_SYS_STAT_H 1

/* Define to 1 if you have the <sys/time.h> header file. */
#cmakedefine HAVE_SYS_TIME_H 1

/* Define to 1 if you have the <sys/types.h> header file. */
#cmakedefine HAVE_SYS_TYPES_H 1

/* Define to 1 if you have the <unistd.h> header file. */
#cmakedefine HAVE_UNISTD_H 1

/* This value is set to 1 to indicate that the system argz facility works */
#cmakedefine HAVE_WORKING_ARGZ 1

/* The archive extension */
#cmakedefine LT_LIBEXT

/* The archive prefix */
#cmakedefine LT_LIBPREFIX

/* Define to the extension used for runtime loadable modules, say, ".so". */
#cmakedefine LT_MODULE_EXT

/* Define to the name of the environment variable that determines the run-time
   module search path. */
#cmakedefine LT_MODULE_PATH_VAR

/* Define to the sub-directory where libtool stores uninstalled libraries. */
#cmakedefine LT_OBJDIR

/* Define to the shared library suffix, say, ".dylib". */
#cmakedefine LT_SHARED_EXT

/* Define to the shared archive member specification, say "(shr.o)". */
#cmakedefine LT_SHARED_LIB_MEMBER

/* Define if dlsym() requires a leading underscore in symbol names. */
#cmakedefine NEED_USCORE

/* Define to the address where bug reports for this package should be sent. */
#cmakedefine PACKAGE_BUGREPORT

/* Define to the full name of this package. */
#cmakedefine PACKAGE_NAME

/* Define to the full name and version of this package. */
#cmakedefine PACKAGE_STRING

/* Define to the one symbol short name of this package. */
#cmakedefine PACKAGE_TARNAME

/* Define to the home page for this package. */
#cmakedefine PACKAGE_URL

/* Define to the version of this package. */
#cmakedefine PACKAGE_VERSION "@PACKAGE_VERSION@"

/* SST-Core Git Branch */
#cmakedefine SSTCORE_GIT_BRANCH "@SSTCORE_GIT_BRANCH@"

/* SST-Core Git Commit Count */
#cmakedefine SSTCORE_GIT_COMMITCOUNT

/* SST-Core Git Head SHA */
#cmakedefine SSTCORE_GIT_HEADSHA "@SSTCORE_GIT_HEADSHA@"

/* Defines the C compiler used to build SST */
#cmakedefine SST_CC

/* Defines the CFLAGS used to build SST */
#cmakedefine SST_CFLAGS

/* Defines compile for Mac OS-X */
#cmakedefine SST_COMPILE_MACOSX 1

/* Define if you have the MPI library. */
#cmakedefine SST_CONFIG_HAVE_MPI 1

/* Set to 1 if Python was found */
#cmakedefine SST_CONFIG_HAVE_PYTHON 1

/* Set to 1 if Python version is 3 */
#cmakedefine SST_CONFIG_HAVE_PYTHON3 1

/* Defines the C preprocessor used to build SST */
#cmakedefine SST_CPP

/* Defines the CPPFLAGS used to build SST */
#cmakedefine SST_CPPFLAGS

/* Defines the C++ compiler used to build SST */
#cmakedefine SST_CXX

/* Defines the C++ preprocessor used to build SST */
#cmakedefine SST_CXXCPP

/* Defines the CXXFLAGS used to build SST */
#cmakedefine SST_CXXFLAGS

/* Whether to enable preview build */
#cmakedefine SST_ENABLE_PREVIEW_BUILD

/* Defines the location SST will be installed in */
#cmakedefine SST_INSTALL_PREFIX "@SST_INSTALL_PREFIX@"

/* Defines the linker used to build SST */
#cmakedefine SST_LD

/* Defines the LDFLAGS used to build SST */
#cmakedefine SST_LDFLAGS

/* Defines the MPI C compiler used to build SST */
#cmakedefine SST_MPICC

/* Defines the MPI C++ compilers used to build SST */
#cmakedefine SST_MPICXX

/* Defines the CPPFLAGS needed to compile Python into SST */
#cmakedefine SST_PYTHON_CPPFLAGS

/* Defines the LDFLAGS needed to compile Python into SST */
#cmakedefine SST_PYTHON_LDFLAGS

/* Test Frameworks will be sym-linked instead of copied on install */
#cmakedefine SST_TESTFRAMEWORK_DEV

/* Define to 1 if all of the C90 standard headers exist (not just the ones
   required in a freestanding environment). This macro is provided for
   backward compatibility; new code need not use it. */
#cmakedefine STDC_HEADERS 1

/* Set to 1 to use memory pools in the SST core */
#cmakedefine USE_MEMPOOL 1

/* Tracks extra information about events and activities. */
#cmakedefine __SST_DEBUG_EVENT_TRACKING__

/* Defines additional debug output is to be printed */
#cmakedefine __SST_DEBUG_OUTPUT__

/* Defines if core should have profiling enabled. */
#cmakedefine __SST_ENABLE_PROFILE__

/* Defines that standard PRI macros should be enabled */
#cmakedefine __STDC_FORMAT_MACROS

/* Define so that glibc/gnulib argp.h does not typedef error_t. */
#cmakedefine __error_t_defined

/* Define to a type to use for 'error_t' if it is not otherwise available. */
#cmakedefine error_t

/* Define if using cmake */
#cmakedefine SST_BUILD_WITH_CMAKE

/* Define to `__inline__' or `__inline' if that's what the C compiler
   calls it, or to nothing if 'inline' is not supported under any name.  */
#ifndef __cplusplus
#undef inline
#endif
